/**
 * TypeScript interfaces for test generation and export functionality
 * 
 * This module defines comprehensive types for test case generation from various sources
 * and export capabilities to multiple formats, following the established plugin architecture.
 * 
 * @example
 * ```typescript
 * const generator: ITestGenerator = new InteractionTestGenerator();
 * const testCases = await generator.generateFromUserInteraction(recording);
 * 
 * const exporter: ITestExporter = new PlaywrightExporter();
 * const exportedTests = await exporter.export(testCases, { format: 'typescript' });
 * ```
 */

import { TestConfig, TestResult, EngineConfig, EngineHealth } from './types';

/**
 * Test generation source types
 * Defines the various sources from which test cases can be generated
 */
export type TestGenerationSource = 
  | 'user_interaction'    // From recorded user interactions
  | 'specification'       // From written specifications/requirements
  | 'template'           // From predefined test templates
  | 'api_documentation'  // From API documentation
  | 'manual_input';      // From manual user input

/**
 * Test export format types
 * Defines the supported output formats for generated test cases
 */
export type TestExportFormat = 
  | 'json'               // Generic JSON format
  | 'yaml'               // YAML configuration format
  | 'csv'                // Comma-separated values
  | 'markdown'           // Markdown documentation format
  | 'playwright'         // Playwright TypeScript test files
  | 'jest'               // Jest JavaScript/TypeScript test files
  | 'mocha'              // Mocha test framework format
  | 'cypress'            // Cypress test format
  | 'testcafe';          // TestCafe test format

/**
 * Test case priority levels
 */
export type TestCasePriority = 'low' | 'medium' | 'high' | 'critical';

/**
 * Test case categories
 */
export type TestCaseCategory = 
  | 'functional'         // Functional testing
  | 'ui'                 // User interface testing
  | 'integration'        // Integration testing
  | 'regression'         // Regression testing
  | 'smoke'              // Smoke testing
  | 'performance'        // Performance testing
  | 'security'           // Security testing
  | 'accessibility';     // Accessibility testing

/**
 * Generated test case interface
 * Represents a single test case generated by the system
 */
export interface GeneratedTestCase {
  /** Unique identifier for the test case */
  id: string;
  
  /** Test case title/name */
  title: string;
  
  /** Test case description */
  description: string;
  
  /** Test case category */
  category: TestCaseCategory;
  
  /** Test case priority */
  priority: TestCasePriority;
  
  /** Test steps to execute */
  steps: TestStep[];
  
  /** Expected results */
  expectedResults: string[];
  
  /** Test preconditions */
  preconditions: string[];
  
  /** Test data requirements */
  testData: TestData[];
  
  /** Tags for categorization */
  tags: string[];
  
  /** Estimated execution time in milliseconds */
  estimatedDuration: number;
  
  /** Source from which this test was generated */
  source: TestGenerationSource;
  
  /** Generation metadata */
  metadata: TestGenerationMetadata;
}

/**
 * Test step interface
 * Represents a single step within a test case
 */
export interface TestStep {
  /** Step number/order */
  order: number;
  
  /** Step action description */
  action: string;
  
  /** Step action type */
  actionType: TestActionType;
  
  /** Target element selector (for UI tests) */
  selector?: string;
  
  /** Input data for the step */
  inputData?: any;
  
  /** Expected outcome for this step */
  expectedOutcome?: string;
  
  /** Step timeout in milliseconds */
  timeout?: number;
  
  /** Optional screenshot capture */
  captureScreenshot?: boolean;
}

/**
 * Test action types
 */
export type TestActionType = 
  | 'navigate'           // Navigate to URL
  | 'click'              // Click element
  | 'type'               // Type text
  | 'select'             // Select option
  | 'wait'               // Wait for element/condition
  | 'verify'             // Verify condition
  | 'assert'             // Assert condition
  | 'screenshot'         // Take screenshot
  | 'scroll'             // Scroll page/element
  | 'hover'              // Hover over element
  | 'drag_drop'          // Drag and drop
  | 'upload_file'        // Upload file
  | 'custom';            // Custom action

/**
 * Test data interface
 * Represents test data needed for test execution
 */
export interface TestData {
  /** Data field name */
  name: string;
  
  /** Data type */
  type: 'string' | 'number' | 'boolean' | 'object' | 'array' | 'file';
  
  /** Data value */
  value: any;
  
  /** Data description */
  description?: string;
  
  /** Whether this data is required */
  required: boolean;
  
  /** Data validation rules */
  validation?: DataValidationRule[];
}

/**
 * Data validation rule interface
 */
export interface DataValidationRule {
  /** Rule type */
  type: 'required' | 'minLength' | 'maxLength' | 'pattern' | 'range' | 'custom';
  
  /** Rule value */
  value: any;
  
  /** Rule description */
  description: string;
}

/**
 * Test generation metadata interface
 */
export interface TestGenerationMetadata {
  /** Generation timestamp */
  generatedAt: Date;
  
  /** Generator version */
  generatorVersion: string;
  
  /** Source file/input */
  sourceFile?: string;
  
  /** Generation confidence score (0-1) */
  confidence: number;
  
  /** Generation method used */
  method: string;
  
  /** Additional metadata */
  custom: Record<string, any>;
}

/**
 * Test generation configuration interface
 */
export interface TestGenerationConfig extends EngineConfig {
  /** Test generation source */
  source: TestGenerationSource;
  
  /** Include performance tests */
  includePerformanceTests?: boolean;
  
  /** Include accessibility tests */
  includeAccessibilityTests?: boolean;
  
  /** Include security tests */
  includeSecurityTests?: boolean;
  
  /** Test case complexity level */
  complexityLevel?: 'basic' | 'intermediate' | 'advanced';
  
  /** Maximum number of test cases to generate */
  maxTestCases?: number;
  
  /** Minimum confidence threshold */
  minConfidence?: number;
  
  /** Test data generation settings */
  testDataGeneration?: TestDataGenerationConfig;
  
  /** Custom generation parameters */
  customParameters?: Record<string, any>;
}

/**
 * Test data generation configuration
 */
export interface TestDataGenerationConfig {
  /** Generate valid test data */
  generateValidData: boolean;
  
  /** Generate invalid test data */
  generateInvalidData: boolean;
  
  /** Generate edge case data */
  generateEdgeCaseData: boolean;
  
  /** Data localization settings */
  localization?: {
    locale: string;
    currency?: string;
    dateFormat?: string;
  };
  
  /** Custom data generators */
  customGenerators?: Record<string, any>;
}

/**
 * Test export configuration interface
 */
export interface TestExportConfig extends EngineConfig {
  /** Export format */
  format: TestExportFormat;
  
  /** Output directory */
  outputDirectory: string;
  
  /** File name pattern */
  fileNamePattern?: string;
  
  /** Include test data files */
  includeTestData?: boolean;
  
  /** Include documentation */
  includeDocumentation?: boolean;
  
  /** Framework-specific options */
  frameworkOptions?: Record<string, any>;
  
  /** Custom export parameters */
  customParameters?: Record<string, any>;
}

/**
 * Test generation result interface
 */
export interface TestGenerationResult {
  /** Generation session ID */
  sessionId: string;
  
  /** Generated test cases */
  testCases: GeneratedTestCase[];
  
  /** Generation statistics */
  statistics: TestGenerationStatistics;
  
  /** Generation errors */
  errors: TestGenerationError[];
  
  /** Generation warnings */
  warnings: TestGenerationWarning[];
  
  /** Generation metadata */
  metadata: TestGenerationMetadata;
}

/**
 * Test generation statistics interface
 */
export interface TestGenerationStatistics {
  /** Total test cases generated */
  totalGenerated: number;
  
  /** Test cases by category */
  byCategory: Record<TestCaseCategory, number>;
  
  /** Test cases by priority */
  byPriority: Record<TestCasePriority, number>;
  
  /** Generation duration in milliseconds */
  generationDuration: number;
  
  /** Average confidence score */
  averageConfidence: number;
  
  /** Success rate */
  successRate: number;
}

/**
 * Test generation error interface
 */
export interface TestGenerationError {
  /** Error code */
  code: string;
  
  /** Error message */
  message: string;
  
  /** Error context */
  context?: Record<string, any>;
  
  /** Error timestamp */
  timestamp: Date;
}

/**
 * Test generation warning interface
 */
export interface TestGenerationWarning {
  /** Warning code */
  code: string;
  
  /** Warning message */
  message: string;
  
  /** Warning context */
  context?: Record<string, any>;
  
  /** Warning timestamp */
  timestamp: Date;
}

/**
 * Test export result interface
 */
export interface TestExportResult {
  /** Export session ID */
  sessionId: string;
  
  /** Export format */
  format: TestExportFormat;
  
  /** Generated files */
  files: ExportedFile[];
  
  /** Export statistics */
  statistics: TestExportStatistics;
  
  /** Export errors */
  errors: TestGenerationError[];
  
  /** Export warnings */
  warnings: TestGenerationWarning[];
  
  /** Export metadata */
  metadata: Record<string, any>;
}

/**
 * Exported file interface
 */
export interface ExportedFile {
  /** File path */
  path: string;
  
  /** File type */
  type: 'test' | 'data' | 'config' | 'documentation';
  
  /** File size in bytes */
  size: number;
  
  /** File content preview */
  preview?: string;
  
  /** File metadata */
  metadata: Record<string, any>;
}

/**
 * Test export statistics interface
 */
export interface TestExportStatistics {
  /** Total files exported */
  totalFiles: number;
  
  /** Total test cases exported */
  totalTestCases: number;
  
  /** Export duration in milliseconds */
  exportDuration: number;
  
  /** Total export size in bytes */
  totalSize: number;
  
  /** Success rate */
  successRate: number;
}

/**
 * User interaction recording interface
 * Represents recorded user interactions for test generation
 */
export interface UserInteractionRecording {
  /** Recording ID */
  id: string;
  
  /** Recording session */
  session: RecordingSession;
  
  /** Recorded interactions */
  interactions: UserInteraction[];
  
  /** Recording metadata */
  metadata: RecordingMetadata;
}

/**
 * Recording session interface
 */
export interface RecordingSession {
  /** Session ID */
  id: string;
  
  /** Session start time */
  startTime: Date;
  
  /** Session end time */
  endTime: Date;
  
  /** Session duration in milliseconds */
  duration: number;
  
  /** Browser information */
  browser: {
    name: string;
    version: string;
    userAgent: string;
  };
  
  /** Viewport information */
  viewport: {
    width: number;
    height: number;
  };
}

/**
 * User interaction interface
 */
export interface UserInteraction {
  /** Interaction ID */
  id: string;
  
  /** Interaction timestamp */
  timestamp: Date;
  
  /** Interaction type */
  type: TestActionType;
  
  /** Target element */
  target: ElementInfo;
  
  /** Interaction data */
  data: any;
  
  /** Page context */
  pageContext: PageContext;
}

/**
 * Element information interface
 */
export interface ElementInfo {
  /** Element selector */
  selector: string;
  
  /** Alternative selectors */
  alternativeSelectors: string[];
  
  /** Element attributes */
  attributes: Record<string, string>;
  
  /** Element text content */
  textContent?: string;
  
  /** Element position */
  position: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
  
  /** Element visibility */
  isVisible: boolean;
}

/**
 * Page context interface
 */
export interface PageContext {
  /** Page URL */
  url: string;
  
  /** Page title */
  title: string;
  
  /** Viewport state */
  viewport: {
    width: number;
    height: number;
    scrollTop: number;
    scrollLeft: number;
  };
  
  /** Network state */
  networkState: {
    online: boolean;
    connectionType?: string;
  };
}

/**
 * Recording metadata interface
 */
export interface RecordingMetadata {
  /** Recording name */
  name: string;
  
  /** Recording description */
  description?: string;
  
  /** Recording tags */
  tags: string[];
  
  /** User information */
  user?: {
    id: string;
    name: string;
  };
  
  /** Recording quality score */
  qualityScore: number;
  
  /** Custom metadata */
  custom: Record<string, any>;
}

/**
 * Core interface for test generators
 * All test generation engines must implement this interface
 */
export interface ITestGenerator {
  /** Generator name */
  readonly name: string;
  
  /** Generator version */
  readonly version: string;
  
  /** Supported generation sources */
  readonly supportedSources: TestGenerationSource[];
  
  /**
   * Generate test cases from user interactions
   * @param recording - User interaction recording
   * @param config - Generation configuration
   * @returns Promise resolving to generated test cases
   */
  generateFromUserInteraction(
    recording: UserInteractionRecording,
    config?: TestGenerationConfig
  ): Promise<TestGenerationResult>;
  
  /**
   * Generate test cases from specifications
   * @param specification - Written specification or requirements
   * @param config - Generation configuration
   * @returns Promise resolving to generated test cases
   */
  generateFromSpecification(
    specification: string,
    config?: TestGenerationConfig
  ): Promise<TestGenerationResult>;
  
  /**
   * Generate test cases from templates
   * @param template - Test template
   * @param parameters - Template parameters
   * @param config - Generation configuration
   * @returns Promise resolving to generated test cases
   */
  generateFromTemplate(
    template: TestTemplate,
    parameters: Record<string, any>,
    config?: TestGenerationConfig
  ): Promise<TestGenerationResult>;
  
  /**
   * Validate generated test cases
   * @param testCases - Test cases to validate
   * @returns Promise resolving to validation results
   */
  validateTestCases(testCases: GeneratedTestCase[]): Promise<TestGenerationValidationResult>;
  
  /**
   * Get generator health status
   */
  getHealth(): Promise<EngineHealth>;
}

/**
 * Core interface for test exporters
 * All test export engines must implement this interface
 */
export interface ITestExporter {
  /** Exporter name */
  readonly name: string;
  
  /** Exporter version */
  readonly version: string;
  
  /** Supported export formats */
  readonly supportedFormats: TestExportFormat[];
  
  /**
   * Export test cases to specified format
   * @param testCases - Test cases to export
   * @param config - Export configuration
   * @returns Promise resolving to export result
   */
  export(
    testCases: GeneratedTestCase[],
    config: TestExportConfig
  ): Promise<TestExportResult>;
  
  /**
   * Validate export configuration
   * @param config - Export configuration to validate
   * @returns Promise resolving to validation result
   */
  validateConfig(config: TestExportConfig): Promise<ExportValidationResult>;
  
  /**
   * Get exporter health status
   */
  getHealth(): Promise<EngineHealth>;
}

/**
 * Test template interface
 */
export interface TestTemplate {
  /** Template ID */
  id: string;
  
  /** Template name */
  name: string;
  
  /** Template description */
  description: string;
  
  /** Template category */
  category: TestCaseCategory;
  
  /** Template structure */
  structure: TestTemplateStructure;
  
  /** Template parameters */
  parameters: TemplateParameter[];
  
  /** Template metadata */
  metadata: Record<string, any>;
}

/**
 * Test template structure interface
 */
export interface TestTemplateStructure {
  /** Template steps */
  steps: TestStepTemplate[];
  
  /** Template preconditions */
  preconditions: string[];
  
  /** Template expected results */
  expectedResults: string[];
  
  /** Template tags */
  tags: string[];
}

/**
 * Test step template interface
 */
export interface TestStepTemplate {
  /** Step order */
  order: number;
  
  /** Step action template */
  actionTemplate: string;
  
  /** Step action type */
  actionType: TestActionType;
  
  /** Step parameters */
  parameters: string[];
}

/**
 * Template parameter interface
 */
export interface TemplateParameter {
  /** Parameter name */
  name: string;
  
  /** Parameter type */
  type: 'string' | 'number' | 'boolean' | 'array' | 'object';
  
  /** Parameter description */
  description: string;
  
  /** Parameter default value */
  defaultValue?: any;
  
  /** Parameter required */
  required: boolean;
  
  /** Parameter validation */
  validation?: DataValidationRule[];
}

/**
 * Test generation validation result interface
 */
export interface TestGenerationValidationResult {
  /** Overall validation result */
  valid: boolean;
  
  /** Validation errors */
  errors: TestGenerationError[];
  
  /** Validation warnings */
  warnings: TestGenerationWarning[];
  
  /** Validation statistics */
  statistics: {
    totalTestCases: number;
    validTestCases: number;
    invalidTestCases: number;
  };
}

/**
 * Export validation result interface
 */
export interface ExportValidationResult {
  /** Overall validation result */
  valid: boolean;
  
  /** Validation errors */
  errors: TestGenerationError[];
  
  /** Validation warnings */
  warnings: TestGenerationWarning[];
}

