/**
 * Analysis Result Types
 * REFACTOR PHASE: Enhanced interfaces with comprehensive documentation and validation
 * 
 * These interfaces define the structure of analysis results, providing detailed
 * information about web application analysis including DOM structure, UI elements,
 * user flows, and generated test scenarios.
 */

/**
 * Status types for analysis operations
 */
export type AnalysisStatus = 'pending' | 'running' | 'completed' | 'failed';

/**
 * Analysis depth levels
 */
export type AnalysisDepth = 'basic' | 'comprehensive' | 'detailed';

/**
 * Comprehensive interface for App Analysis results
 * 
 * Contains all information gathered during application analysis including:
 * - DOM structure and complexity metrics
 * - Identified UI elements with locator strategies
 * - Detected user flows and navigation patterns
 * - Generated test scenarios and AI insights
 * - Performance metrics and error information
 * 
 * @example
 * ```typescript
 * const result: AppAnalysisResult = {
 *   id: 'analysis_12345',
 *   timestamp: new Date(),
 *   status: 'completed',
 *   url: 'https://example.com',
 *   uiElements: [...],
 *   userFlows: [...],
 *   artifacts: {
 *     screenshots: ['page.png'],
 *     reports: ['analysis.html']
 *   }
 * };
 * ```
 */
export interface AppAnalysisResult {
  /** Unique identifier for this analysis session */
  id: string;
  
  /** Timestamp when analysis was started */
  timestamp: Date;
  
  /** Total analysis duration in milliseconds */
  duration: number;
  
  /** URL of the analyzed web application */
  url: string;
  
  /** Current status of the analysis operation */
  status: AnalysisStatus;
  
  /**
   * DOM structure analysis results
   * Provides metrics about the analyzed web page structure
   */
  domStructure?: {
    /** Total number of DOM elements found */
    elementCount: number;
    /** Maximum depth of DOM hierarchy */
    depth: number;
    /** Complexity assessment based on structure */
    complexity: 'low' | 'medium' | 'high';
  };
  
  /** Array of identified UI elements with locator strategies */
  uiElements?: AnalysisUIElement[];
  
  /** Array of detected user flows and navigation patterns */
  userFlows?: AnalysisUserFlow[];
  
  /** Array of generated test scenarios */
  testScenarios?: AnalysisTestScenario[];
  
  /**
   * Generated artifacts during analysis
   * Includes screenshots, videos, traces, and reports
   */
  artifacts?: {
    /** Paths to captured screenshot files */
    screenshots: string[];
    /** Paths to recorded video files */
    videos: string[];
    /** Paths to Playwright trace files */
    traces: string[];
    /** Paths to generated analysis reports */
    reports: string[];
  };
  
  /**
   * AI analysis results (when AI features are enabled)
   * Provides intelligent insights and recommendations
   */
  aiAnalysis?: {
    /** Confidence score for AI analysis (0.0-1.0) */
    confidence: number;
    /** AI-generated insights about the application */
    insights: string[];
    /** AI-generated recommendations for testing */
    recommendations: string[];
    /** Number of tests generated by AI */
    generatedTests: number;
  };
  
  /**
   * Performance metrics for analysis operations
   * Helps optimize analysis configuration and troubleshoot issues
   */
  performance?: {
    /** Total time spent on analysis (ms) */
    analysisTime: number;
    /** Time spent extracting UI elements (ms) */
    elementExtractionTime: number;
    /** Time spent detecting user flows (ms) */
    flowDetectionTime: number;
    /** Time spent generating test scenarios (ms) */
    testGenerationTime: number;
  };
  
  /** Array of error messages encountered during analysis */
  errors?: string[];
  
  /** Array of warning messages from analysis */
  warnings?: string[];
  
  /**
   * Configuration used for this analysis
   * Useful for reproducing results or understanding context
   */
  configuration?: {
    /** Analysis depth level used */
    analysisDepth: AnalysisDepth;
    /** Whether screenshots were included */
    includeScreenshots: boolean;
    /** Additional configuration properties */
    [key: string]: any;
  };
}

/**
 * User flow action types
 */
export type UserFlowActionType = 'navigate' | 'click' | 'type' | 'select' | 'submit' | 'wait' | 'verify';

/**
 * User flow complexity levels
 */
export type FlowComplexity = 'low' | 'medium' | 'high';

/**
 * Business impact levels for user flows
 */
export type BusinessImpact = 'low' | 'medium' | 'high' | 'critical';

/**
 * Enhanced User Flow interface for analysis
 * 
 * Represents a complete user journey through the application, including
 * all steps, validation criteria, and metadata for test generation.
 * 
 * @example
 * ```typescript
 * const loginFlow: AnalysisUserFlow = {
 *   id: 'flow_login',
 *   name: 'User Login',
 *   type: 'authentication',
 *   category: 'critical',
 *   steps: [
 *     { id: 'step1', action: 'navigate', target: '/login' },
 *     { id: 'step2', action: 'type', target: '#email', value: 'user@example.com' }
 *   ]
 * };
 * ```
 */
export interface AnalysisUserFlow {
  /** Unique identifier for this user flow */
  id: string;
  
  /** Human-readable name for the flow */
  name: string;
  
  /** Type categorization (e.g., 'authentication', 'checkout', 'search') */
  type: string;
  
  /** Business category (e.g., 'critical', 'optional', 'enhancement') */
  category: string;
  
  /** Optional detailed description of the flow */
  description?: string;
  
  /**
   * Array of steps that comprise this user flow
   * Each step represents a single user action or system response
   */
  steps: Array<{
    /** Unique identifier for this step */
    id: string;
    /** Type of action performed */
    action: UserFlowActionType;
    /** Target element or URL for the action */
    target: string;
    /** Optional value for input actions */
    value?: string;
    /** Human-readable description of the step */
    description?: string;
    /** Conditions to wait for before proceeding */
    waitConditions?: string[];
    /** Maximum time to wait for step completion (ms) */
    timeout?: number;
  }>;
  
  /**
   * Metadata about the user flow
   * Used for prioritization and test strategy
   */
  metadata: {
    /** Technical complexity of implementing tests */
    complexity: FlowComplexity;
    /** Business impact if this flow fails */
    businessImpact: BusinessImpact;
    /** How often users execute this flow */
    frequency: 'rare' | 'occasional' | 'frequent' | 'daily';
    /** Types of users who execute this flow */
    userTypes: string[];
    /** Device types where this flow is relevant */
    devices: string[];
  };
  
  /**
   * Validation criteria for the user flow
   * Defines what constitutes success or failure
   */
  validation: {
    /** Elements that must be present for flow to be valid */
    requiredElements: string[];
    /** Criteria that indicate successful flow completion */
    successCriteria: string[];
    /** Error conditions and expected handling */
    errorHandling: string[];
  };
  
  /**
   * Visual representation of the flow
   * Includes both textual and graphical formats
   */
  diagram: {
    /** Mermaid diagram syntax for the flow */
    mermaid: string;
    /** Array of nodes in the flow diagram */
    nodes: Array<{
      id: string;
      label: string;
      type: string;
    }>;
    /** Array of edges connecting nodes */
    edges: Array<{
      from: string;
      to: string;
      label?: string;
    }>;
  };
}

/**
 * Enhanced UI Element interface for analysis
 */
export interface AnalysisUIElement {
  id: string;
  type: string;
  category: string;
  
  locators: {
    primary: string;
    fallbacks: string[];
    testId: string;
    reliability: number;
  };
  
  properties: {
    tag: string;
    attributes: Record<string, any>;
    text: string;
    value: string;
    visible: boolean;
    enabled: boolean;
    interactive: boolean;
  };
  
  context: {
    parent: string;
    siblings: string[];
    position: { x: number; y: number; width: number; height: number };
  };
  
  accessibility: {
    role: string;
    label: string;
    ariaDescribedBy: string;
    tabIndex: number;
  };
  
  validation: {
    rules: string[];
    errorMessages: string[];
  };
  
  interactions: {
    supported: string[];
    testActions: string[];
  };
}

/**
 * Enhanced Test Scenario interface for analysis
 */
export interface AnalysisTestScenario {
  id: string;
  name: string;
  type: string;
  priority: string;
  steps: any[];
  assertions: any[];
  testData: Record<string, any>;
}
